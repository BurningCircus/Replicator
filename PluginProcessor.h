/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Delay.h"
#define NUM_DELAY_LINES 5
#define DELAY_IN_SAMPLES 66150


//==============================================================================
/**
*/
class ReplicatorAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    ReplicatorAudioProcessor();
    ~ReplicatorAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //Plugin-specific public data and functions
    enum Parameters_t { bypass = 0, time0, time1, time2, time3, time4, fb0, fb1, fb2, fb3, fb4,
        hpf0, hpf1, hpf2, hpf3, hpf4, lpf0, lpf1, lpf2, lpf3, lpf4, panDry, pan0, pan1, pan2, pan3, pan4, 
        gainDry, gain0, gain1, gain2, gain3, gain4, totalNumParams };
        
    bool needsUIUpdate() {
        return UIUpdateFlag;
    }
    
    void requestUIUpdate() {
        UIUpdateFlag = true;
    }
    
    void clearUIUpdateFlag() {
        UIUpdateFlag = false;
    } 
    
    double getCurrentSampleRate() {
        return currentSampleRate;
    }
    
    void setCurrentSampleRate(double newSampleRate) {
        currentSampleRate = newSampleRate;
    }

private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ReplicatorAudioProcessor)
    
    //Plugin-specific private data
    bool UIUpdateFlag;
    float userParams[totalNumParams]; //An array to store all of the user's parameters.
	Delay* delayLines[NUM_DELAY_LINES]; //An array of delay objects.
    float *tempL[5], *tempR[5]; //An array of temporary buffers for the delay lines.
    double currentSampleRate; //Logs the current sample rate.
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
